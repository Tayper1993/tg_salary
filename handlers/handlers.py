from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery

from keyboards.keyboards import kb_salary

router = Router()


def salary(salary: int, month: str):
    data = {
        '–î–µ–∫–∞–±—Ä—å': {'days_to_avans': 10, 'work_day': 20},
        '–Ø–Ω–≤–∞—Ä—å': {'days_to_avans': 5, 'work_day': 17},
        '–§–µ–≤—Ä–∞–ª—å': {'days_to_avans': 11, 'work_day': 20},

        '–ú–∞—Ä—Ç': {'days_to_avans': 10, 'work_day': 20},
        '–ê–ø—Ä–µ–ª—å': {'days_to_avans': 11, 'work_day': 21},
        '–ú–∞–π': {'days_to_avans': 8, 'work_day': 20},

        '–ò—é–Ω—å': {'days_to_avans': 9, 'work_day': 19},
        '–ò—é–ª—å': {'days_to_avans': 11, 'work_day': 23},
        '–ê–≤–≥—É—Å—Ç': {'days_to_avans': 11, 'work_day': 22},

        '–°–µ–Ω—Ç—è–±—Ä—å': {'days_to_avans': 10, 'work_day': 21},
        '–û–∫—Ç—è–±—Ä—å': {'days_to_avans': 11, 'work_day': 23},
        '–ù–æ—è–±—Ä—å': {'days_to_avans': 10, 'work_day': 21},
    }

    month = data.get(month.capitalize())
    wd = month.get('work_day')
    dta = month.get('days_to_avans')

    avans = (int(salary) / wd) * dta
    zepeshka = int(salary) - avans
    return round(avans), round(zepeshka)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /count_salary
class Reg(StatesGroup):
    confirm = State()
    salary = State()
    month = State()


@router.message(Command('count_salary'))
async def reg_one(message: Message, state: FSMContext):
    await state.set_state(Reg.confirm)
    await message.reply('–°—á–∏—Ç–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É? ü§î', reply_markup=kb_salary['confirm'])


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –î–∞/–ù–µ—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@router.callback_query(lambda c: c.data in ('yes', 'no'))
async def process_confirm(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    if callback.data == 'yes':
        await state.set_state(Reg.salary)
        await callback.message.answer('–ö–∞–∫–∞—è —É –í–∞—Å –º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞?', reply_markup=kb_salary['salary'])
    else:
        await callback.message.answer('–•–æ—Ä–æ—à–æ, –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑! üëã')
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
@router.callback_query(lambda c: c.data in ('60000', '70000'))
async def process_salary(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.update_data(salary=callback.data)
    await state.set_state(Reg.month)
    await callback.message.answer('–ó–∞ –∫–∞–∫–æ–π –º–µ—Å—è—Ü —Å—á–∏—Ç–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É?', reply_markup=kb_salary['month'])


@router.callback_query(Reg.month)
async def two_three(callback: CallbackQuery, state: FSMContext):
    await state.update_data(month=callback.data)
    data = await state.get_data()
    sal = salary(data.get('salary'), data.get('month'))
    await callback.message.answer(f'–ú–µ—Å—è—Ü: {data["month"]}\n–û–±—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {data["salary"]}\n–ê–≤–∞–Ω—Å –∏ –ó–∞—Ä–ø–ª–∞—Ç–∞:{sal}')
    # await state.clear()
